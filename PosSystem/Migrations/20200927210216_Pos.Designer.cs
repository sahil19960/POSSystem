// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PosSystem.DataAcessLayer;

namespace PosSystem.Migrations
{
    [DbContext(typeof(PosDbContext))]
    [Migration("20200927210216_Pos")]
    partial class Pos
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PosSystem.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InvoiceNumber")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfSale")
                        .HasColumnName("DateOfSale")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnName("Discount")
                        .HasColumnType("float");

                    b.Property<int?>("EmployeeIdUserId")
                        .HasColumnType("int");

                    b.Property<double>("Vat")
                        .HasColumnName("VAT")
                        .HasColumnType("float");

                    b.HasKey("InvoiceNumber");

                    b.HasIndex("EmployeeIdUserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("PosSystem.Models.ItemInSalesTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TransactionId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsumedQuantity")
                        .HasColumnName("ConsumedQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceReferenceNumberInvoiceNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ProductReferenceIdProductId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnName("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("TransactionId");

                    b.HasIndex("InvoiceReferenceNumberInvoiceNumber");

                    b.HasIndex("ProductReferenceIdProductId");

                    b.ToTable("SalesTransactions");
                });

            modelBuilder.Entity("PosSystem.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailableQuantity")
                        .HasColumnName("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnName("Category")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnName("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("UnitPrice")
                        .HasColumnName("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            AvailableQuantity = 2,
                            Category = 2,
                            ImageUrl = "/images/grapes.jpeg",
                            ProductName = "Grapes",
                            UnitPrice = 2.0
                        },
                        new
                        {
                            ProductId = 2,
                            AvailableQuantity = 3,
                            Category = 2,
                            ImageUrl = "/images/strawberries.jpeg",
                            ProductName = "Strawberries",
                            UnitPrice = 2.0
                        },
                        new
                        {
                            ProductId = 3,
                            AvailableQuantity = 3,
                            Category = 3,
                            ImageUrl = "/images/clothing.jpg",
                            ProductName = "Clothing",
                            UnitPrice = 2.0
                        },
                        new
                        {
                            ProductId = 4,
                            AvailableQuantity = 3,
                            Category = 1,
                            ImageUrl = "/images/computer_repair.jpeg",
                            ProductName = "Compute Repair",
                            UnitPrice = 2.0
                        },
                        new
                        {
                            ProductId = 5,
                            AvailableQuantity = 3,
                            Category = 1,
                            ImageUrl = "/images/comuter.jpg",
                            ProductName = "Computer",
                            UnitPrice = 2.0
                        },
                        new
                        {
                            ProductId = 6,
                            AvailableQuantity = 3,
                            Category = 4,
                            ImageUrl = "/images/gift_folding.jpeg",
                            ProductName = "Gift Folding",
                            UnitPrice = 2.0
                        },
                        new
                        {
                            ProductId = 7,
                            AvailableQuantity = 3,
                            Category = 1,
                            ImageUrl = "/images/headphone.jpg",
                            ProductName = "Headphone",
                            UnitPrice = 2.0
                        },
                        new
                        {
                            ProductId = 8,
                            AvailableQuantity = 20,
                            Category = 1,
                            ImageUrl = "/images/motherboard.jpg",
                            ProductName = "motherboard",
                            UnitPrice = 200.0
                        },
                        new
                        {
                            ProductId = 9,
                            AvailableQuantity = 20,
                            Category = 1,
                            ImageUrl = "/images/mouse.jpg",
                            ProductName = "Mouse",
                            UnitPrice = 200.0
                        },
                        new
                        {
                            ProductId = 10,
                            AvailableQuantity = 20,
                            Category = 4,
                            ImageUrl = "/images/notebook.jpg",
                            ProductName = "Notebook",
                            UnitPrice = 200.0
                        },
                        new
                        {
                            ProductId = 11,
                            AvailableQuantity = 200,
                            Category = 3,
                            ImageUrl = "/images/tie.jpeg",
                            ProductName = "Tie",
                            UnitPrice = 19.0
                        });
                });

            modelBuilder.Entity("PosSystem.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserEmailId")
                        .IsRequired()
                        .HasColumnName("UserEmailId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.HasIndex("UserEmailId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Password = "testpass",
                            UserEmailId = "test@gmail.com",
                            UserName = "test"
                        });
                });

            modelBuilder.Entity("PosSystem.Models.Invoice", b =>
                {
                    b.HasOne("PosSystem.Models.User", "EmployeeId")
                        .WithMany()
                        .HasForeignKey("EmployeeIdUserId");
                });

            modelBuilder.Entity("PosSystem.Models.ItemInSalesTransaction", b =>
                {
                    b.HasOne("PosSystem.Models.Invoice", "InvoiceReferenceNumber")
                        .WithMany()
                        .HasForeignKey("InvoiceReferenceNumberInvoiceNumber");

                    b.HasOne("PosSystem.Models.Product", "ProductReferenceId")
                        .WithMany()
                        .HasForeignKey("ProductReferenceIdProductId");
                });
#pragma warning restore 612, 618
        }
    }
}
